-- SQL 고득점 Kit : JOIN

-- 01 특정 기간동안 대여 가능한 자동차들의 대여비용 구하기
SELECT
    A.CAR_ID,
    A.CAR_TYPE,
    FLOOR(A.DAILY_FEE * 30 * (1 - C.DISCOUNT_RATE/100)) AS FEE

FROM CAR_RENTAL_COMPANY_CAR A
    LEFT JOIN CAR_RENTAL_COMPANY_RENTAL_HISTORY B
        ON
        A.CAR_ID = B.CAR_ID AND
        B.START_DATE <= '2022-11-30' AND    -- 11월에 대여내역이 "있는" 경우,
        B.END_DATE >= '2022-11-01'          -- LEFT JOIN 시 row 채워짐

    JOIN CAR_RENTAL_COMPANY_DISCOUNT_PLAN C
        ON
        A.CAR_TYPE = C.CAR_TYPE AND
        A.CAR_TYPE IN ('세단', 'SUV') AND
        DURATION_TYPE = '30일 이상'
WHERE
    ROUND(A.DAILY_FEE * 30 * (1 - C.DISCOUNT_RATE/100)) BETWEEN 500000 AND 2000000 - 1 AND
    B.CAR_ID IS NULL    -- 11월에 대여내역이 "없는" 경우, LEFT JOIN 결과가 NULL임

ORDER BY FEE DESC, CAR_TYPE, CAR_ID DESC;


-- 02 주문량이 많은 아이스크림들 조회하기
SELECT H.FLAVOR
FROM FIRST_HALF H
    JOIN JULY J ON H.FLAVOR = J.FLAVOR
GROUP BY FLAVOR
ORDER BY SUM(H.TOTAL_ORDER) + SUM(J.TOTAL_ORDER) DESC
LIMIT 3;


-- 03 조건에 맞는 도서와 저자 리스트 출력하기
SELECT BOOK_ID, AUTHOR_NAME, DATE_FORMAT(PUBLISHED_DATE, '%Y-%m-%d') AS PUBLISHED_DATE
FROM BOOK B
    LEFT JOIN AUTHOR A ON B.AUTHOR_ID = A.AUTHOR_ID
WHERE CATEGORY = '경제'
ORDER BY PUBLISHED_DATE;


-- 04 5월 식품들의 총매출 조회하기
SELECT P.PRODUCT_ID, P.PRODUCT_NAME, SUM(P.PRICE * O.AMOUNT) AS TOTAL_SALES
FROM FOOD_ORDER O
    JOIN FOOD_PRODUCT P
        ON O.PRODUCT_ID = P.PRODUCT_ID AND
        YEAR(PRODUCE_DATE) = '2022' AND
        MONTH(PRODUCE_DATE) = '5'
GROUP BY P.PRODUCT_ID
ORDER BY TOTAL_SALES DESC, P.PRODUCT_ID;


-- 05 그룹별 조건에 맞는 식당 목록 출력하기
SELECT MEMBER_NAME, REVIEW_TEXT, DATE_FORMAT(REVIEW_DATE, '%Y-%m-%d') AS REVIEW_DATE
FROM MEMBER_PROFILE M
    JOIN REST_REVIEW R ON M.MEMBER_ID = R.MEMBER_ID
    WHERE R.MEMBER_ID = (
        SELECT MEMBER_ID
        FROM REST_REVIEW
        GROUP BY MEMBER_ID
        ORDER BY COUNT(MEMBER_ID) DESC
        LIMIT 1
    )
ORDER BY REVIEW_DATE, REVIEW_TEXT;


-- 06 없어진 기록 찾기
SELECT O.ANIMAL_ID, O.NAME
FROM ANIMAL_INS I
    RIGHT JOIN ANIMAL_OUTS O ON I.ANIMAL_ID = O.ANIMAL_ID
WHERE I.ANIMAL_ID IS NULL
ORDER BY O.ANIMAL_ID;


-- 07 있었는데요 없었습니다
SELECT I.ANIMAL_ID, I.NAME
FROM ANIMAL_INS I
    JOIN ANIMAL_OUTS O ON I.ANIMAL_ID = O.ANIMAL_ID
WHERE I.DATETIME > O.DATETIME
ORDER BY I.DATETIME;


-- 08 오랜 기간 보호한 동물(1)
SELECT I.NAME, I.DATETIME
FROM ANIMAL_INS I
    LEFT JOIN ANIMAL_OUTS O ON I.ANIMAL_ID = O.ANIMAL_ID
WHERE O.ANIMAL_ID IS NULL
ORDER BY I.DATETIME
LIMIT 3;


-- 09 보호소에서 중성화한 동물
SELECT I.ANIMAL_ID, I.ANIMAL_TYPE, I.NAME
FROM ANIMAL_INS I
    JOIN ANIMAL_OUTS O ON I.ANIMAL_ID = O.ANIMAL_ID
WHERE
    LEFT(SEX_UPON_INTAKE, 6) = 'Intact' AND
    SEX_UPON_OUTCOME IN ('Spayed Female', 'Neutered Male');


-- 10 상품 별 오프라인 매출 구하기
SELECT P.PRODUCT_CODE, SUM(SALES_AMOUNT) * PRICE AS SALES
FROM PRODUCT P
    JOIN OFFLINE_SALE O ON P.PRODUCT_ID = O.PRODUCT_ID
GROUP BY P.PRODUCT_ID
ORDER BY SALES DESC, P.PRODUCT_CODE;


-- 11 상품을 구매한 회원 비율 구하기
SELECT
    YEAR(SALES_DATE) AS YEAR,
    MONTH(SALES_DATE) AS MONTH,
    COUNT(DISTINCT O.USER_ID) AS PUCHASED_USERS,
    ROUND(COUNT(DISTINCT O.USER_ID) / (SELECT COUNT(DISTINCT USER_ID)
                                       FROM USER_INFO
                                       WHERE YEAR(JOINED) = '2021'), 1
         ) AS PUCHASED_RATIO

FROM USER_INFO U
    LEFT JOIN ONLINE_SALE O
    ON U.USER_ID = O.USER_ID

WHERE YEAR(JOINED) = '2021'
GROUP BY YEAR(SALES_DATE), MONTH(SALES_DATE)
HAVING MONTH IS NOT NULL
ORDER BY YEAR, MONTH;
